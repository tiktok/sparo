"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[655],{2657:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=o(678),r=o(4738);const s={title:"sparo checkout"},a=void 0,c={id:"pages/commands/sparo_checkout",title:"sparo checkout",description:"",source:"@site/docs/pages/commands/sparo_checkout.md",sourceDirName:"pages/commands",slug:"/pages/commands/sparo_checkout",permalink:"/sparo/preview/pr-76/pages/commands/sparo_checkout",draft:!1,unlisted:!1,editUrl:"https://github.com/tiktok/sparo/tree/main/apps/website/docs/pages/commands/sparo_checkout.md",tags:[],version:"current",frontMatter:{title:"sparo checkout"},sidebar:"docsSidebar",previous:{title:"sparo auto-config",permalink:"/sparo/preview/pr-76/pages/commands/sparo_auto-config"},next:{title:"sparo clone",permalink:"/sparo/preview/pr-76/pages/commands/sparo_clone"}},i={},p=[];function d(e){const t={code:"code",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'sparo checkout [branch] [start-point]\n\nUpdates files in the working tree to match the version in the index or the\nspecified tree. If no pathspec was given, git checkout will also update HEAD to\nset the specified branch as the current branch.\n\nPositionals:\n  branch                                                                [string]\n  start-point                                                           [string]\n\nOptions:\n      --help         Show help                                         [boolean]\n  -b                 Create a new branch and start it at <start-point> [boolean]\n  -B                 Create a new branch and start it at <start-point>; if it\n                     already exists, reset it to <start-point>         [boolean]\n      --profile      Checkout projects by specified profile(s). The profiles\n                     will be recorded and reused by other sparo commands. For\n                     example, running "sparo checkout <branch>" sparse checkout\n                     based on the reused profiles after running "git checkout"\n                                                           [array] [default: []]\n      --add-profile  Checkout projects with recorded profile(s) and the\n                     specified added profile(s). Adds the specified added\n                     profile(s) to sparo recorded profiles [array] [default: []]\n      --no-profile   Checkout projects without any profiles and clear all\n                     recorded profiles                                 [boolean]\n      --to           Checkout projects up to (and including) project <to..>, can\n                     be used together with option --profile/--add-profile to\n                     form a union selection of the two options. The projects\n                     selectors here will never replace what have been checked\n                     out by profiles                       [array] [default: []]\n      --from         Checkout projects downstream from (and including itself and\n                     all its dependencies) project <from..>, can be used\n                     together with option --profile/--add-profile to form a\n                     union selection of the two options. The projects selectors\n                     here will never replace what have been checked out by\n                     profiles                              [array] [default: []]\n'})})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},4738:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>c});var n=o(6166);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);